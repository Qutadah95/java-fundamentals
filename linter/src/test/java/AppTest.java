/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import org.junit.Test;

import java.nio.file.Path;
import java.nio.file.Paths;

import static linter.App.*;
import static org.junit.Assert.*;

public class AppTest {
    @Test public void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }
    //comments


    //Test the linter on a file that contains no errors.
    @Test public void noErrors(){
        Path file = Paths.get("noErrors.js");

        assertEquals("", readingFromJsFile(file));
    }

    //Test the linter on a file that contains one error.
    @Test public void oneError(){
        Path file2 = Paths.get("oneError.js");

        assertEquals("Line 3 : Missing semicolon.", readingFromJsFile(file2));
    }

    @Test public void fewErrors() {
        Path file3 = Paths.get("fewErrors.js");

        assertEquals("Line 3 : Missing semicolon.\n" +
                "Line 5 : Missing semicolon.\n" +
                "Line 11 : Missing semicolon.", readingFromJsFile(file3));
    }

    //Test the linter on a file that contains many errors.
    @Test public void manyErrors() {
        Path file4 = Paths.get("manyErrors.js");

        assertEquals("Line 3 : Missing semicolon.\n" +
                "Line 5 : Missing semicolon.\n" +
                "Line 11 : Missing semicolon.\n" +
                "Line 13 : Missing semicolon.\n" +
                "Line 15 : Missing semicolon.\n" +
                "Line 20 : Missing semicolon.", readingFromJsFile(file4));
    }

    //Test the linter on an empty file.
    @Test public void isEmpty() {
        Path file1 = Paths.get("empty.js");

        assertEquals("", readingFromJsFile(file1));
    }

}